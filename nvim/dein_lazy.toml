# {{{ Deoplete
# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# on_event = 'InsertEnter'
# hook_source = '''
#   let g:deoplete#enable_at_startup = 1
# '''
# hook_post_source = '''
#   call deoplete#custom#option({
#     \'auto_complete_delay': 0,
#     \'auto_complete_start_length': 1,
#     \'smart_case': v:true,
#     \})
# '''
# 
# [[plugins]]
# repo = 'Shougo/deoplete-lsp'
# on_source = 'nvim-lspconfig'
# depends = 'deoplete.nvim'
# 
# [[plugins]]
# repo = 'tbodt/deoplete-tabnine'
# on_source = 'deoplete.nvim'
# build = './install.sh'
# }}}

[[plugins]]
repo = 'hrsh7th/nvim-compe'
on_event = 'InsertEnter'
depends = ['compe-tabnine']
hook_source = '''
  set completeopt=menuone,noselect

  inoremap <silent><expr> <C-Space> compe#complete()
  inoremap <silent><expr> <CR>      compe#confirm('<CR>')
  inoremap <silent><expr> <C-e>     compe#close('<C-e>')
  inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
  inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })

  let g:compe = {}
  let g:compe.enabled = v:true
  let g:compe.autocomplete = v:true
  let g:compe.debug = v:false
  let g:compe.min_length = 1
  let g:compe.preselect = 'enable'
  let g:compe.throttle_time = 0
  let g:compe.source_timeout = 200
  let g:compe.incomplete_delay = 200
  let g:compe.max_abbr_width = 100
  let g:compe.max_kind_width = 100
  let g:compe.max_menu_width = 100
  let g:compe.documentation = v:true
  
  let g:compe.source = {}
  let g:compe.source.path = v:true
  let g:compe.source.buffer = v:true
  let g:compe.source.calc = v:true
  let g:compe.source.nvim_lsp = v:true
  let g:compe.source.nvim_lua = v:true

  let g:compe.source.treesitter = v:true
  let g:compe.source.tabnine = v:true
'''

[[plugins]]
repo = 'tzachar/compe-tabnine'



[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
on_command = 'Telescope'
depends = ['popup.nvim', 'plenary.nvim', 'nvim-web-devicons']
hook_add = '''
  nnoremap <Space>g  <cmd>Telescope live_grep<CR>
  nnoremap <Space>ff <cmd>Telescope find_files<CR>
  nnoremap <Space>fb <cmd>Telescope buffers<CR>
'''
hook_post_source = '''
lua << END_LUA
  local actions = require('telescope.actions')
  require('telescope').setup{
    defaults = {
      vimgrep_arguments = {
        'rg',
        '--color=never',
        '--no-heading',
        '--with-filename',
        '--line-number',
        '--column',
        '--smart-case'
      },
      initial_mode = "normal",
      winblend = 10,
      color_devicons = true,
      use_less = true,
      file_previewer = require('telescope.previewers').vim_buffer_cat.new,
      grep_previewer = require('telescope.previewers').vim_buffer_vimgrep.new,
      qflist_previewer = require('telescope.previewers').vim_buffer_qflist.new,
      mappings = {
      },
    }
  }
END_LUA
'''

[[plugins]]
repo = 'nvim-lua/popup.nvim'
on_event = ['FocusLost','CursorHold']
depends = 'plenary.nvim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
on_event = ['FocusLost','CursorHold']



[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'



# {{{ Defx.nvim
[[plugins]]
repo = 'Shougo/defx.nvim'
on_command = 'Defx'
depends = 'defx-icons'
hook_add = '''
  nmap <Space>f :<C-u>Defx -split=vertical -listed -resume -auto-cd -winwidth=40<CR>
  function! s:open_defx_if_directory()
    try
      let l:full_path = expand(expand('%:p'))
    catch
      return
    endtry
    if isdirectory(l:full_path)
      execute "Defx `expand('%:p')` | bd " . expand('%:r')
    endif
  endfunction
  augroup defx_config
    autocmd!
    autocmd BufEnter * call s:open_defx_if_directory()
  augroup END
'''
hook_post_source = '''
  call defx#custom#option('_', {'columns': 'indent:icons:filename:type'})
'''
[plugins.ftplugin]
defx = '''
  nnoremap <silent><buffer><expr> <CR> defx#async_action('drop')
  nnoremap <silent><buffer><expr> o defx#do_action('open_or_close_tree')
  nnoremap <silent><buffer><expr> v defx#do_action('drop', 'vsplit')
  nnoremap <silent><buffer><expr> s defx#do_action('drop', 'split')

  nnoremap <silent><buffer><expr> h defx#async_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~ defx#async_action('cd')

  nnoremap <silent><buffer><expr> nf defx#do_action('new_file')
  nnoremap <silent><buffer><expr> nd defx#do_action('new_directory')

  nnoremap <silent><buffer><expr> yy defx#do_action('copy')
  nnoremap <silent><buffer><expr> m defx#do_action('move')
  nnoremap <silent><buffer><expr> p defx#do_action('paste')

  nnoremap <silent><buffer><expr> d defx#do_action('remove')
  nnoremap <silent><buffer><expr> r defx#do_action('rename')
  nnoremap <silent><buffer><expr> q defx#do_action('quit')
  nnoremap <silent><buffer><expr> <ESC> defx#do_action('quit')
'''

[[plugins]]
repo = 'kristijanhusak/defx-icons'
hook_source = '''
  let g:defx_icons_enable_syntax_highlight = 1
  let g:defx_icons_column_length = 2
  let g:defx_icons_directory_icon = ''
  let g:defx_icons_mark_icon = '*'
  let g:defx_icons_parent_icon = ''
  let g:defx_icons_default_icon = ''
  let g:defx_icons_directory_symlink_icon = ''
  let g:defx_icons_root_opened_tree_icon = ''
  let g:defx_icons_nested_opened_tree_icon = ''
  let g:defx_icons_nested_closed_tree_icon = ''
'''
# }}}



[[plugins]]
repo = "tyru/eskk.vim"
on_map = { ic = '<Plug>' }
hook_add = '''
  imap <C-j>  <Plug>(eskk:toggle)
  cmap <C-j>  <Plug>(eskk:toggle)
'''
hook_source = '''
  let g:eskk#directory = g:config_home . "/nvim/eskk"
  let g:eskk#dictionary = "~/SKK/skk-jisyo"
  let g:eskk#large_dictionary = "/usr/share/skk/SKK-JISYO.L"
  let g:egg_like_newline = 1
'''



[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = 'BufRead'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
    ensure_installed = 'all',
    highlight = {
        enable = true,
    },
    indent = {
      enable = true,
    },
}
EOF
'''



[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_lua = 'lspconfig'
hook_source = '''
lua << EOF
  local nvim_lsp = require('lspconfig')
  vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(vim.lsp.diagnostic.on_publish_diagnostics, { virtual_text = false })
EOF
  augroup lsp_show_diagnostics_under_cursor
    autocmd!
    autocmd CursorMoved * lua vim.lsp.diagnostic.show_line_diagnostics()
  augroup END
  nnoremap <Space>gd <cmd>lua vim.lsp.buf.definition()<CR>
  nnoremap <Space>gi <cmd>lua vim.lsp.buf.implemention()<CR>
  nnoremap <Space>r  <cmd>lua vim.lsp.buf.rename()<CR>
  nnoremap <Space>h  <cmd>lua vim.lsp.buf.hover()<CR>
  nnoremap <Space>f  <cmd>lua vim.lsp.buf.formatting()<CR>
'''
[plugins.ftplugin]
bash = "lua require('lspconfig').bashls.setup{}"
c = "lua require('lspconfig').clangd.setup{}"
cpp = "lua require('lspconfig').clangd.setup{}"
rust = "lua require('lspconfig').rust_analyzer.setup{}"
python = "lua require('lspconfig').pyls.setup{}"
vim = "lua require('lspconfig').vimls.setup{}"



[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
on_command = 'TableModeToggle'



[[plugins]]
repo = 'plytophogy/vim-virtualenv'
on_ft = 'python'
hook_source = '''
  let g:virtualenv_directory = '~/.local/share/virtualenvs'
'''


[[plugins]]
repo = 'tpope/vim-markdown'
on_ft = 'markdown'
depends = 'vim-table-mode'
hook_source = '''
  let g:markdown_minlines = 100
  let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'rust', 'cpp', 'c']
'''



[[plugins]]
repo = 'previm/previm'
on_command = 'PrevimOpen'
depends = 'open-browser.vim'
hook_source = '''
  let g:previm_enable_realtime = 1
'''



[[plugins]]
repo = "tyru/open-browser.vim"
on_command = 'OpenBrowser'




[[plugins]]
repo = 'rhysd/clever-f.vim'
on_map = { nxo = '<Plug>'}
hook_add = '''
    nmap f <Plug>(clever-f-f)
    xmap f <Plug>(clever-f-f)
    omap f <Plug>(clever-f-f)
    nmap F <Plug>(clever-f-F)
    xmap F <Plug>(clever-f-F)
    omap F <Plug>(clever-f-F)
    nmap t <Plug>(clever-f-t)
    xmap t <Plug>(clever-f-t)
    omap t <Plug>(clever-f-t)
    nmap T <Plug>(clever-f-T)
    xmap T <Plug>(clever-f-T)
    omap T <Plug>(clever-f-T)
'''
hook_source = '''
  let g:clever_f_smart_case=1
  let g:clever_f_use_migemo=1
'''



[[plugins]]
repo = 'rhysd/vim-operator-surround'
on_map = {n = '<Plug>'}
depends = 'vim-operator-user'
hook_add = '''
  nmap <silent>sa <Plug>(operator-surround-append)
  nmap <silent>sd <Plug>(operator-surround-delete)
  nmap <silent>sr <Plug>(operator-surround-replace)
'''



[[plugins]]
repo = 'kana/vim-operator-user'



[[plugins]]
repo = 'lambdalisue/suda.vim'
on_event = 'BufRead'
hook_source = '''
  let g:suda_smart_edit = 1
'''
