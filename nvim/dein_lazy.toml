[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hook_source = '''
  " latex math
  call lexima#add_rule({'char':'$', 'input_after':'$', 'filetype': ['latex', 'markdown']})
  call lexima#add_rule({'char':'$', 'at':'\%#\$', 'leave':1, 'filetype': ['latex', 'markdown']})
  call lexima#add_rule({'char':'<BS>', 'at':'\$\%#\$', 'delete':1, 'filetype': ['latex', 'markdown']})
  " satysfi
  call lexima#add_rule({'char': '$', 'input': '${', 'input_after': '}', 'filetype': ['satysfi']})
  call lexima#add_rule({'char': '$', 'at': '\\\%#', 'leave': 1, 'filetype': ['satysfi']})
  " cancel ' -> '' rule
  call lexima#add_rule({'char': "'", 'input': "'", 'filetype': ['satysfi']})
  " in command argument, < is block-text literal
  call lexima#add_rule({'char': "<", 'at': '\%(+\|\\\)\%(\a\|\.\|_\|-\)\+\(\n\)\?\%(\%(?:\|!\)\?(\(\_.\)*)\|{\(\_.\)*}\|<\(\_.\)*>\|\(\n\)*\)*\%#', 'input': "<", "input_after": ">", 'filetype': ['satysfi']})
  " '<> is block-text literal
  call lexima#add_rule({'char': '<', 'at': "'\\%#", 'input': '<', 'input_after': '>', 'filetype': ['satysfi']})
'''


[[plugins]]
repo = 'vim-skk/skkeleton'
on_map = { ic = '<Plug>(skkeleton' }
depends = 'ddc.vim'
hook_add = '''
  imap <C-j> <Plug>(skkeleton-toggle)
  cmap <C-j> <Plug>(skkeleton-toggle)
'''
hook_source = '''
  call skkeleton#config({
    \ 'globalJisyo': '/usr/share/skk/SKK-JISYO.L',
    \ 'eggLikeNewline': v:true,
    \ 'registerConvertResult': v:true,
    \ 'userJisyo': '~/SKK/skk-jisyo',
    \ })
  call skkeleton#register_kanatable('rom', {
    \ ',': ['，'],
    \ '.': ['。'],
    \ })
  augroup rc_skk
    autocmd!
    autocmd User skkeleton-enable-pre call s:skkeleton_pre()
    autocmd User skkeleton-enable-post lmap <buffer> l <Plug>(skkeleton-disable)
    autocmd User skkeleton-disable-pre call s:skkeleton_post()
  augroup END
  function! s:skkeleton_pre() abort
    let s:prev_buffer_config = ddc#custom#get_buffer()
    call ddc#custom#patch_buffer('sources', ['skkeleton'])
  endfunction
  function! s:skkeleton_post() abort
    call ddc#custom#set_buffer(s:prev_buffer_config)
  endfunction
'''



# LSP
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_ft = ['rust', 'cpp']
if = 'has("nvim")'
hook_source = '''
lua << EOF
  local nvim_lsp = require'lspconfig'
  nvim_lsp.rust_analyzer.setup{}
  nvim_lsp.clangd.setup{}
--  require'lspconfig'.pyls.setup{}
EOF
  if !(exists("g:use_ddc") && g:use_ddc)
    set omnifunc=v:lua.vim.lsp.omnifunc
  endif
  nnoremap gi <cmd>lua vim.lsp.buf.implemention()<CR>
  nnoremap <Space>lf  <cmd>lua vim.lsp.buf.format{async = true}<CR>
  nnoremap <Space>lh  <cmd>lua vim.lsp.buf.hover()<CR>
  nnoremap <Space>lr  <cmd>lua vim.lsp.buf.rename()<CR>
'''


[[plugins]]
repo = 'j-hui/fidget.nvim'
#on_source = 'nvim-lspconfig'
hook_source = '''
lua << EOF
  require"fidget".setup{}
EOF
'''



# Highlight
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim")'
on_event = 'BufRead'
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = 'all',
  additional_vim_regex_highlighting = false,
  highlight = {
    enable = true,
    disable = {'c', 'help'},
  },
  indent = {
    enable = {'satysfi'},
  },
}

-- adding satysfi parser
local parser_config = require"nvim-treesitter.parsers".get_parser_configs()
parser_config.satysfi = {
  install_info = {
    url = "https://github.com/monaqa/tree-sitter-satysfi",
    files = {"src/parser.c", "src/scanner.c"},
    branch = "master",
    generate_requires_npm = false,
    requires_generate_from_grammer = false,
  },
  filetype = "satysfi",
}
EOF
'''



# Filer
[[plugins]]
repo = 'lambdalisue/fern.vim'
on_command = 'Fern'
rev = 'main'
depends = ['fern-renderer-nerdfont.vim', 'fern-git-status.vim', 'glyph-palette.vim']
hook_add = '''
  nnoremap <Space>e <cmd>Fern . -opener=vsplit<CR>
  nnoremap <Space>n <cmd>Fern . -reveal=% -drawer -toggle -width=40<CR>
  let g:fern#disable_default_mappings = 1
  let g:fern#renderer = "nerdfont"
  " open fern when edit a directory
  function! s:open_with_fern() abort
    let path = expand('%:p')
    if !isdirectory(path)
      return
    endif
    let bufnr = bufnr()
    execute printf('keepjumps keepalt Fern %s', fnameescape(path))
  endfunction
  augroup open-fern-dir
    autocmd!
    autocmd BufEnter * ++nested call s:open_with_fern()
  augroup END
'''
[plugins.ftplugin]
fern = '''
  call glyph_palette#apply()
  nmap <buffer> <Plug>(fern-action-open) <Plug>(fern-action-open:select)

  nmap <buffer> a     <Plug>(fern-choice)
  nmap <buffer> <CR>  <Plug>(fern-action-open-or-enter)
  nmap <buffer> l     <Plug>(fern-action-open-or-enter)
  nmap <buffer> v     <Plug>(fern-action-open:side)
  nmap <buffer> x     <Plug>(fern-action-mark:toggle)j
  nmap <buffer> h     <Plug>(fern-action-leave)
  nmap <buffer> r     <Plug>(fern-action-rename)
  nmap <buffer> !     <Plug>(fern-action-hidden:toggle)
  nmap <buffer> m     <Plug>(fern-action-move)
  nmap <buffer> c     <Plug>(fern-action-copy)
  nmap <buffer> y     <Plug>(fern-action-yank)
  nmap <buffer> ?     <Plug>(fern-action-help)
  nmap <buffer> <C-c> <Plug>(fern-action-cancel)
  nmap <buffer> .     <Plug>(fern-repeat)
  nmap <buffer> R     <Plug>(fern-action-reload:all)
  nmap <buffer> q     <cmd>quit<CR>
  nmap <buffer> Q     <cmd>bwipe!<CR>
'''

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
depends = 'nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/glyph-palette.vim'

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'


# Zen Mode
[[plugins]]
repo = 'folke/zen-mode.nvim'
if = 'has("nvim")'
on_command = 'ZenMode'
hook_add = '''
  nnoremap <Space>z <cmd>ZenMode<CR>
'''
hook_source = '''
lua << EOF
  require('zen-mode').setup{
    window = {
      backdrop = 1,
      width = 120,
      height = 0.9,
      options = {
        signcolumn = "no",
        number = false,
        relativenumber = false,
      }
    },
  }
EOF
'''



# Terminal
[[plugins]]
repo = 'Shougo/deol.nvim'
if = 'has("nvim")'
depends = 'ddc.vim'
on_command = 'Deol'
hook_add = '''
  nnoremap <Space>t <cmd>Deol zsh -split=floating -no-start-insert -toggle -winheight=30 -winwidth=150<CR>
  tnoremap <ESC> <C-\><C-n>
'''
hook_source = '''
  let g:deol#enable_ddc_completion = v:true
  let g:deol#floating_border = "rounded"
'''



# {{{ Lua Library
[[plugins]]
repo = 'nvim-lua/popup.nvim'
depends = ['plenary.nvim']

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'
# }}}



[[plugins]]
repo = 'plytophogy/vim-virtualenv'
on_ft = 'python'
hook_source = '''
  let g:virtualenv_directory = '~/.local/share/virtualenvs'
'''



[[plugins]]
repo = 'tpope/vim-markdown'
on_ft = 'markdown'
depends = 'vim-table-mode'
hook_source = '''
  let g:markdown_minlines = 100
  let g:markdown_fenced_languages = ['html', 'python', 'bash=sh', 'rust', 'cpp', 'c']
'''



[[plugins]]
repo = 'hrsh7th/vim-searchx'
on_func = ['searchx#start']
hook_add = '''
  nnoremap ? <Cmd>call searchx#start({"dir": 0})<CR>
  xnoremap ? <Cmd>call searchx#start({"dir": 0})<CR>
  nnoremap / <Cmd>call searchx#start({"dir": 1})<CR>
  xnoremap / <Cmd>call searchx#start({"dir": 1})<CR>
'''
hook_source = '''
  " Move to next/prev match
  nnoremap N     <Cmd>call searchx#prev_dir()<CR>
  nnoremap n     <Cmd>call searchx#next_dir()<CR>
  xnoremap N     <Cmd>call searchx#prev_dir()<CR>
  xnoremap n     <Cmd>call searchx#next_dir()<CR>
  nnoremap <C-k> <Cmd>call searchx#prev()<CR>
  nnoremap <C-j> <Cmd>call searchx#next()<CR>
  xnoremap <C-k> <Cmd>call searchx#prev()<CR>
  xnoremap <C-j> <Cmd>call searchx#next()<CR>
  cnoremap <C-k> <Cmd>call searchx#prev()<CR>
  cnoremap <C-j> <Cmd>call searchx#next()<CR>

  autocmd user User SearchxAccept normal! zzzv

  let g:searchx             = {}
  let g:searchx.scrolltime  = 100
  let g:searchx.scrolloff   = &scrolloff
  let g:searchx.auto_accept = v:true
  let g:searchx.markers     = split('ASDFGHJKLWERTYUIOVBNMQPZX', '.\zs')
'''



[[plugins]]
repo = 'rhysd/clever-f.vim'
on_map = { nxo = '<Plug>' }
hook_add = '''
  nmap F <Plug>(clever-f-F)
  nmap T <Plug>(clever-f-T)
  nmap f <Plug>(clever-f-f)
  nmap t <Plug>(clever-f-t)
  omap F <Plug>(clever-f-F)
  omap T <Plug>(clever-f-T)
  omap f <Plug>(clever-f-f)
  omap t <Plug>(clever-f-t)
  xmap F <Plug>(clever-f-F)
  xmap T <Plug>(clever-f-T)
  xmap f <Plug>(clever-f-f)
  xmap t <Plug>(clever-f-t)
  let g:clever_f_ignore_case    = v:true
  let g:clever_f_smart_case     = v:true
  let g:clever_f_use_migemo     = v:true
  let g:clever_f_timeout_ms     = 5000
'''


[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
on_command = 'TableModeToggle'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_command = 'EasyAlign'
on_map = { nx = '<Plug>(EasyAlign)' }
hook_add = '''
  nmap ga <Plug>(EasyAlign)
  xmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'phaazon/hop.nvim'
if = 'has("nvim")'
on_command = ['HopWord', 'HopPattern', 'HopChar1', 'HopChar2', 'HopLine', 'HopLineStart']
hook_add = '''
  vnoremap <silent><Space>w <cmd>HopWord<CR>
  nnoremap <silent><Space>w <cmd>HopWord<CR>
'''
hook_source = '''
  lua << EOF
  local hp = require'hop'
  hp.setup{ keys = 'asdfghjklwertyuiopvbcn' }
EOF
'''



[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
on_map = {n = '<Plug>(operator-surround'}
depends = 'vim-operator-user'
hook_add = '''
  nmap <silent>sa <Plug>(operator-surround-append)
  nmap <silent>sd <Plug>(operator-surround-delete)a
  nmap <silent>sr <Plug>(operator-surround-replace)a
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
on_map = {n = '<Plug>(operator-replace'}
depends = 'vim-operator-user'
hook_add = '''
  map R <Plug>(operator-replace)
'''

# {{{ Text Object
[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'Julian/vim-textobj-variable-segment'
on_map = {xo = '<Plug>(textobj-variable'}
depends = 'vim-textobj-user'
hook_add = '''
  omap <silent>iv <Plug>(textobj-variable-i)
  xmap <silent>iv <Plug>(textobj-variable-i)
  omap <silent>av <Plug>(textobj-variable-a)
  xmap <silent>av <Plug>(textobj-variable-a)
'''

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
on_map = {xo = '<Plug>(textobj-parameter'}
depends = 'vim-textobj-user'
hook_add = '''
  omap <silent>i, <Plug>(textobj-parameter-i)
  xmap <silent>i, <Plug>(textobj-parameter-i)
  omap <silent>a, <Plug>(textobj-parameter-a)
  xmap <silent>a, <Plug>(textobj-parameter-a)
'''
# }}}

