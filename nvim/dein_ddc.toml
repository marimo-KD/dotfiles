[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['denops.vim', 'context_filetype.vim', 'pum.vim']
on_event = ['InsertEnter']
hook_add = '''
  nnoremap : <cmd>call CommandlinePre()<CR>:
  function! CommandlinePre() abort
    call dein#source('ddc.vim')
    call dein#source('neco-vim')
    " Note: It disables default command line completion!
    cnoremap <silent><expr> <Tab>
          \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
          \ '<Tab>' : ddc#manual_complete()
    cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
    cnoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
    cnoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
    cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
    cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>

    " Overwrite sources
    if !exists('b:prev_buffer_config')
      let b:prev_buffer_config = ddc#custom#get_buffer()
    endif
    call ddc#custom#patch_buffer('cmdlineSources',
            \ ['cmdline', 'around', 'necovim', 'file'])

    autocmd User DDCCmdlineLeave ++once call CommandlinePost()
    autocmd InsertEnter <buffer> ++once call CommandlinePost()

    " Enable command line completion
    call ddc#enable_cmdline_completion()
    call ddc#enable()
  endfunction
  function! CommandlinePost() abort
    " Restore sources
    silent! cunmap <C-n>
    silent! cunmap <C-p>
    silent! cunmap <C-y>
    silent! cunmap <C-e>
    if exists('b:prev_buffer_config')
      call ddc#custom#set_buffer(b:prev_buffer_config)
      unlet b:prev_buffer_config
    else
      call ddc#custom#set_buffer({})
    endif
  endfunction
'''
hook_source = '''
  call ddc#custom#patch_global('autoCompleteEvents', [
      \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
      \ 'CmdlineEnter', 'CmdlineChanged',
      \ ])
  call ddc#custom#patch_global('completionMenu', 'pum.vim')
  " config sources
  call ddc#custom#patch_global('sources', ['buffer', 'file'])
  call ddc#custom#patch_global('sourceOptions', {
    \ '_': {
    \   'matchers': ['matcher_fuzzy'],
    \   'sorters' : ['sorter_fuzzy'],
    \   'converters': ['converter_remove_overlap', 'converter_fuzzy']
    \ },
    \ 'around': {'mark': '[A]' },
    \ 'buffer': {'mark': '[B]'},
    \ 'cmdline': {'mark': '[cmd]'},
    \ 'file': {'mark': '[f]', 'isVolatile': v:true, 'forceCompletionPattern': '\S/\S*',},
    \ 'eskk': {'mark': '[eskk]', 'matchers': [], 'sorters': [], 'minAutoCompleteLength': 1,},
    \ 'necovim': {'mark': '[neco]'},
    \ 'nvim-lsp': {'mark': '[lsp]', 'forceCompletionPattern': '\\.|:|->'},
    \ 'skkeleton': {'mark': '[skk]', 'matchers': ['skkeleton'], 'sorters':[], 'minAutoCompleteLength': 2, "isVolatile": v:true,},
    \ 'zsh': {'mark': '[zsh]', 'isVolatile': v:true, 'forceCompletionPattern': '\S/\S*',},
    \ })
  call ddc#custom#patch_global('sourceParams', {
    \ 'buffer': {
    \   'requireSameFiletype': v:true,
    \   'limitBytes': 5000000,
    \   'fromAltBuf': v:true,
    \   'fourceCollect': v:true,
    \ },
    \ 'nvim-lsp': {'useIcon': v:true,},
    \ })
  call ddc#enable()
'''


[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
  call pum#set_option('border', 'rounded')
  inoremap <silent><expr> <Tab>
        \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
        \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
        \ '<Tab>' : ddc#manual_complete()
  inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-n> <cmd>call pum#map#insert_relative(+1)<CR>
  inoremap <C-p> <cmd>call pum#map#insert_relative(-1)<CR>
  inoremap <C-y> <cmd>call pum#map#confirm()<CR>
  inoremap <C-e> <cmd>call pum#map#cancel()<CR>
'''




[[plugins]]
repo = 'hrsh7th/vim-vsnip'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
depends = ['vim-vsnip']
on_source = 'ddc-nvim-lsp'



# ddc sources
[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-zsh'
on_ft = ['zsh', 'deol']
depends = 'ddc.vim'
hook_source = '''
  call ddc#custom#patch_filetype(
        \ ['zsh', 'deol'], 'sources',
        \ ['zsh', 'around', 'file']
        \)
'''

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'nvim-lspconfig'
depends = 'ddc.vim'
hook_source = '''
  autocmd User PumCompleteDone call vsnip_integ#on_complete_done(g:pum#completed_item)
  call ddc#custom#patch_filetype(
    \ ['rust', 'c', 'cpp', 'python'], 'sources',
    \ ['nvim-lsp', 'vsnip', 'buffer']
    \ )
'''

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc-nvim-lsp'
hook_source = '''
  let g:signature_help_config = {
  \ 'style': 'virtual',
  \ 'border': v:true,
  \}
  call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc-nvim-lsp'
hook_source = '''
  let g:popup_preview_config = {
  \ 'border': v:true,
  \}
  call popup_preview#enable()
'''

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml', 'help']
depends = 'ddc.vim'
hook_source = '''
    call ddc#custom#patch_filetype(
      \ ['vim', 'toml', 'help'], 'sources',
      \ ['necovim', 'around', 'file']
      \ )
'''



# ddc matchers
[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'


# ddc sorters
[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'


# ddc converters
[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'
