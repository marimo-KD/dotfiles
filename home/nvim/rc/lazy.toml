# LSP
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = 'BufRead'
if = 'has("nvim")'
hook_add = '''
  nnoremap gi <cmd>lua vim.lsp.buf.implementation()<CR>
  nnoremap <Leader>lf  <cmd>lua vim.lsp.buf.format{async = true}<CR>
  nnoremap <Leader>lh  <cmd>lua vim.lsp.buf.hover()<CR>
  nnoremap <Leader>lr  <cmd>lua vim.lsp.buf.rename()<CR>
'''

[[plugins]]
repo = 'j-hui/fidget.nvim'
on_event = 'LspAttach'
lua_source = 'require("fidget").setup()'

[[plugins]]
repo = 'nvimdev/lspsaga.nvim'
if = false
on_event = 'LspAttach'
lua_source = '''
require("lspsaga").setup()
'''

# Highlight
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim")'
on_event = ['BufRead', 'CursorHold']
hook_post_update = 'TSUpdate'
lua_source = '''
require'nvim-treesitter.install'.compilers = {'clang', '-std=c++14'}
require'nvim-treesitter.configs'.setup {
  ensure_installed = {'bash', 'c', 'cpp', 'json', 'latex', 'lua', 'markdown', 'nix', 'python', 'rust', 'satysfi', 'toml', 'vim', 'yaml'},
  additional_vim_regex_highlighting = false,
  highlight = {
    enable = true,
  },
  indent = {
    enable = true,
  },
}

-- add satysfi parser
local parser_config = require"nvim-treesitter.parsers".get_parser_configs()
parser_config.satysfi = {
  install_info = {
    url = "https://github.com/monaqa/tree-sitter-satysfi",
    files = {"src/parser.c", "src/scanner.c"},
    branch = "master",
  },
  filetype = "satysfi",
}
'''

[[plugins]]
repo = 'HiPhish/rainbow-delimiters.nvim'
on_event = ['LspAttach']

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'kaarmu/typst.vim'
on_ft = 'typst'

[[plugins]]
repo = 'lervag/vimtex'
if = false
on_ft = ['tex']
on_source = '''
let g:vimtex_view_method = 'zathura'
'''

[[plugins]]
repo = 'zk-org/zk-nvim'
on_ft = ['markdown']
lua_source = '''
require("zk").setup({
  picker = "select",
  lsp = {},
})
'''

# Terminal
[[plugins]]
repo = 'Shougo/deol.nvim'
if = 'has("nvim")'
hook_source = '''
  if has("nvim")
    "let g:terminal_color_0 = '#282c34'   
    "let g:terminal_color_1 = '#e06c75'   
    "let g:terminal_color_2 = '#98c379'   
    "let g:terminal_color_3 = '#e5c07b'   
    "let g:terminal_color_4 = '#61afef'   
    "let g:terminal_color_5 = '#be5046'   
    "let g:terminal_color_6 = '#56b6c2'   
    "let g:terminal_color_7 = '#979eab'   
    "let g:terminal_color_8 = '#393e48'   
    "let g:terminal_color_9 = '#d19a66'   
    "let g:terminal_color_10 = '#56b6c2'  
    "let g:terminal_color_11 = '#e5c07b'  
    "let g:terminal_color_12 = '#61afef'  
    "let g:terminal_color_13 = '#be5046'  
    "let g:terminal_color_14 = '#56b6c2'  
    "let g:terminal_color_15 = '#abb2bf'  
    "let g:terminal_color_background = '#282c34'
    "let g:terminal_color_foreground = '#979eab'
  endif
  let g:deol#enable_ddc_completion = v:true
  let g:deol#floating_border = "rounded"
  let g:deol#prompt_pattern = "‚ùØ \?"
  tnoremap <ESC> <C-\><C-n>
  tnoremap <expr> <Tab> pum#visible() ?
        \ '<Cmd>call pum#map#select_relative(+1)<CR>' :
        \ '<Tab>'
  tnoremap <expr> <S-Tab> pum#visible() ?
        \ '<Cmd>call pum#map#select_relative(-1)<CR>' :
        \ '<S-Tab>'
  tnoremap <Down>   <Cmd>call pum#map#insert_relative(+1)<CR>
  tnoremap <Up>     <Cmd>call pum#map#insert_relative(-1)<CR>
  tnoremap <C-y>    <Cmd>call pum#map#confirm()<CR>
  tnoremap <C-o>    <Cmd>call pum#map#confirm()<CR>
'''
[plugins.ftplugin]
deol = '''
  nnoremap <buffer> e <Plug>(deol_edit)
  setlocal winhighlight=Normal:NormalFloat
'''


# {{{ Lua Library
[[plugins]]
repo = 'nvim-lua/popup.nvim'
depends = ['plenary.nvim']

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'nvim-tree/nvim-web-devicons'
on_lua = 'nvim-web-devicons'
# }}}

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_command = 'EasyAlign'
on_map = { nx = '<Plug>(EasyAlign)' }
hook_add = '''
  nmap ga <Plug>(EasyAlign)
  xmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'monaqa/dial.nvim'
on_map = { nv = '<Plug>(dial-' }
hook_add = '''
  nmap  <C-a>  <Plug>(dial-increment)
  nmap  <C-x>  <Plug>(dial-decrement)
  nmap g<C-a> g<Plug>(dial-increment)
  nmap g<C-x> g<Plug>(dial-decrement)
  vmap  <C-a>  <Plug>(dial-increment)
  vmap  <C-x>  <Plug>(dial-decrement)
  vmap g<C-a> g<Plug>(dial-increment)
  vmap g<C-x> g<Plug>(dial-decrement)
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = { nv = '<Plug>(jplus' }
hook_add = '''
  nmap J <Plug>(jplus)
  vmap J <plug>(jplus
  nmap <Leader>J <Plug>(jplus-input)
  vmap <Leader>J <Plug>(jplus-input)
'''

# {{{ Operator
[[plugins]]
repo = 'kana/vim-niceblock'
on_map = {x = '<Plug>(niceblock'}
hook_add = '''
  xnoremap I <Plug>(niceblock-I)
  xnoremap A <Plug>(niceblock-A)
'''

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'rhysd/vim-operator-surround'
on_map = {n = '<Plug>(operator-surround'}
depends = 'vim-operator-user'
hook_add = '''
  map <silent>sa <Plug>(operator-surround-append)
  map <silent>sd <Plug>(operator-surround-delete)
  map <silent>sr <Plug>(operator-surround-replace)
  nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
  nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)
'''

[[plugins]]
repo = 'kana/vim-operator-replace'
on_map = {n = '<Plug>(operator-replace'}
depends = 'vim-operator-user'
hook_add = '''
  map R <Plug>(operator-replace)
'''
# }}}

# {{{ Text Object
[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'Julian/vim-textobj-variable-segment'
on_map = {xo = '<Plug>(textobj-variable'}
depends = 'vim-textobj-user'
hook_add = '''
  omap <silent>iv <Plug>(textobj-variable-i)
  xmap <silent>iv <Plug>(textobj-variable-i)
  omap <silent>av <Plug>(textobj-variable-a)
  xmap <silent>av <Plug>(textobj-variable-a)
'''

[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
on_map = {xo = '<Plug>(textobj-multiblock'}
depends = 'vim-textobj-user'
hook_add = '''
  omap <silent>ib <Plug>(textobj-multiblock-i)
  xmap <silent>ib <Plug>(textobj-multiblock-i)
  omap <silent>ab <Plug>(textobj-multiblock-a)
  xmap <silent>ab <Plug>(textobj-multiblock-a)
'''

[[plugins]]
repo = 'thinca/vim-textobj-between'
on_map = { xo = '<Plug>(textobj-between' }
depends = 'vim-textobj-user'
hook_add = '''
  omap <silent>if <Plug>(textobj-between-i)
  xmap <silent>if <Plug>(textobj-between-i)
  omap <silent>af <Plug>(textobj-between-a)
  xmap <silent>af <Plug>(textobj-between-a)
'''

[[plugins]]
repo = 'somini/vim-textobj-fold'
on_map = { xo = '<Plug>(textobj-fold' }
depends = 'vim-textobj-user'
hook_add = '''
  omap <silent>iz <Plug>(textobj-fold-i)
  xmap <silent>iz <Plug>(textobj-fold-i)
  omap <silent>az <Plug>(textobj-fold-a)
  xmap <silent>az <Plug>(textobj-fold-a)
'''

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
on_map = {xo = '<Plug>(textobj-parameter'}
depends = 'vim-textobj-user'
hook_add = '''
  omap <silent>i, <Plug>(textobj-parameter-i)
  xmap <silent>i, <Plug>(textobj-parameter-i)
  omap <silent>a, <Plug>(textobj-parameter-a)
  xmap <silent>a, <Plug>(textobj-parameter-a)
'''
# }}}

