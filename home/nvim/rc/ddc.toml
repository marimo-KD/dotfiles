[[plugins]]
repo = 'Shougo/ddc.vim'
depends = 'denops.vim'
on_event = ['CmdlineEnter', 'InsertEnter', 'CursorHold']
hooks_file = '~/.config/nvim/rc/ddc.vim'

[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
  call pum#set_option(#{
  \  auto_select: v:false,
  \  border: 'single',
  \  commit_characters: ['.'],
  \  follow_cursor: v:true,
  \  max_height: 8,
  \  max_width: 80,
  \  preview: v:false,
  \  preview_border: 'single',
  \  preview_height: 10,
  \  preview_width: 80,
  \ })
'''

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
depends = 'pum.vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'uga-rosa/denippet.vim'
on_source = 'ddc.vim'
hook_source = '''
let dir = stdpath('config') . '/snippet/'
for file in glob(dir . '*.*', 1, 1)
  call denippet#load(file)
endfor
'''

[[plugins]]
repo = 'uga-rosa/ddc-source-lsp-setup'
if = 'has("nvim")'

# ddc sources
[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'uga-rosa/ddc-source-vsnip'
if = false
on_source = 'ddc.vim'
depends = 'vim-vsnip'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-input'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-lsp'
if = 'has("nvim")'
on_source = 'ddc.vim'
depends = ['ddc-source-lsp-setup', 'nvim-lspconfig']
lua_source = '''
  require('vim.lsp._watchfiles')._watchfunc = require('vim._watch').watch
  local nvim_lsp = require'lspconfig'
  -- local capabilities = vim.lsp.protocol.make_client_capabilities()
  -- capabilities.textDocument.completion.completionItem.snippetSupport = true
  require("ddc_source_lsp_setup").setup()
  nvim_lsp.rust_analyzer.setup{}
  nvim_lsp.clangd.setup{}
  nvim_lsp.denols.setup{}
  nvim_lsp.ocamllsp.setup{}
  nvim_lsp.hls.setup{
    filetypes = {'haskell', 'lhaskell', 'cabal'},
  }
  nvim_lsp.marksman.setup{}
  nvim_lsp.typst_lsp.setup{
    typst_lsp = {
      settings = {
        exportPdf = "onSave"
      }
    }
  }
  nvim_lsp.texlab.setup{
    texlab = {
      build = {
        args = { "-interaction=nonstopmode", "-synctex=1", "%f" },
        executable = "latexmk",
        forwardSearchAfter = false,
        onSave = true,
      },
      chktex = {
        onEdit = false,
        onOpenAndSave = true
      },
      diagnosticsDelay = 300,
      formatterLineLength = 80,
      forwardSearch = {
        executable = "zathura",
        args = {"--synctex-forward", "%l:1:%f", "%p"},
      },
      latexFormatter = "latexindent",
      latexindent = {
        modifyLineBreaks = false
      }
    }
  }
  nvim_lsp['satysfi-ls'].setup{
    autostart = true,
  }
--  require'lspconfig'.pyls.setup{}
'''

[[plugins]]
repo = 'Shougo/ddc-source-shell-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lua'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-omni'
if = false
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_source = 'ddc.vim'

# ddc matchers
[[plugins]]
repo = 'Shougo/ddc-filter-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-filter-matcher_length'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

# ddc sorters
[[plugins]]
repo = 'Shougo/ddc-filter-sorter_rank'
on_source = 'ddc.vim'

# ddc converters
[[plugins]]
repo = 'Shougo/ddc-filter-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = 'call signature_help#enable()'

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
if = false
on_source = 'ddc.vim'
hook_source = 'call popup_preview#enable()'
