[[plugins]]
repo = 'Shougo/ddc.vim'
depends = 'denops.vim'
on_event = ['InsertEnter', 'CursorHold']
hooks_file = '~/.config/nvim/rc/ddc.vim'

[[plugins]]
repo = 'Shougo/pum.vim'
hook_source = '''
  call pum#set_option(#{
  \  auto_select: v:false,
  \  border: 'rounded',
  \  follow_cursor: v:true,
  \  max_height: 8,
  \  max_width: 80,
  \  preview: v:true,
  \  preview_border: 'rounded',
  \  preview_height: 10,
  \  preview_width: 80,
  \ })
'''

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
depends = 'pum.vim'
on_source = 'ddc.vim'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
#depends = ['friendly-snippets']
hook_source = '''
  " Expand
  imap <expr> <C-l> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-l>'
  smap <expr> <C-l> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-l>'

  " Jump forward or backward
  imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
  imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
  smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
'''

[[plugins]]
repo = 'uga-rosa/ddc-source-lsp-setup'
if = 'has("nvim")'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'

# ddc sources
[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'uga-rosa/ddc-source-vsnip'
on_source = 'ddc.vim'
depends = 'vim-vsnip'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-input'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-source-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-lsp'
if = 'has("nvim")'
on_source = 'ddc.vim'
depends = ['ddc-source-lsp-setup', 'nvim-lspconfig']
lua_source = '''
  require('vim.lsp._watchfiles')._watchfunc = require('vim._watch').watch
  local nvim_lsp = require'lspconfig'
  -- local capabilities = vim.lsp.protocol.make_client_capabilities()
  -- capabilities.textDocument.completion.completionItem.snippetSupport = true
  require("ddc_source_lsp_setup").setup()
  nvim_lsp.rust_analyzer.setup{
    cmd = {'rustup', 'run', 'stable', 'rust-analyzer'},
  }
  nvim_lsp.clangd.setup{}
  nvim_lsp.denols.setup{}
  nvim_lsp.ocamllsp.setup{}
  nvim_lsp.hls.setup{
    filetypes = {'haskell', 'lhaskell', 'cabal'},
  }
  nvim_lsp.typst_lsp.setup{
    settings = {
      exportPdf = "onSave"
    }
  }
  nvim_lsp.texlab.setup{
    settings = {
      texlab = {
        build = {executable = "lualatex", args = { "%f" },},
      },
    }
  }
  nvim_lsp['satysfi-ls'].setup{
    autostart = true,
  }
--  require'lspconfig'.pyls.setup{}
'''

[[plugins]]
repo = 'Shougo/ddc-source-shell-native'
on_source = 'ddc.vim'
hook_source = '''
  call ddc#custom#patch_filetype(
        \ ['zsh', 'deol'], 'sources',
        \ ['shell-native', 'file']
        \)
'''

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lua'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neco-vim'
on_source = 'ddc.vim'
hook_source = '''
  call ddc#custom#patch_filetype(
    \ ['vim'], 'sources',
    \ ['necovim', 'around', 'file']
    \ )
'''

# ddc matchers
[[plugins]]
repo = 'Shougo/ddc-filter-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'

# ddc sorters
[[plugins]]
repo = 'Shougo/ddc-filter-sorter_rank'
on_source = 'ddc.vim'

# ddc converters
[[plugins]]
repo = 'Shougo/ddc-filter-converter_remove_overlap'
on_source = 'ddc.vim'
